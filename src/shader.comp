#version 450
struct Particle
{
	vec2 pos;
	vec2 vel;
};

// LOOK: These bindings correspond to the DescriptorSetLayouts and
// the DescriptorSets from prepareCompute()!

// Binding 0 : Particle storage buffer (read)
layout(set = 0, binding = 1) buffer ParticlesA
{
   Particle particlesA[ ];
};
int NUM_PARTICLES = 15000;
// Binding 1 : Particle storage buffer (write)
layout(set = 0, binding = 2) buffer ParticlesB
{
   Particle particlesB[ ];
};
// this value is set in the outside also, so that the actual number of work groups * our local size is equal to number particles

layout (local_size_x = 64, local_size_y = 1) in; // LOOK: rule weights and distances, as well as particle count, based off uniforms.// The deltaT here has to be updated every frame to account for changes in

// frame rate.
layout (set = 0 ,binding = 0) uniform UBO
{
	float deltaT;
	float rule1Distance;
	float rule2Distance;
	float rule3Distance;
	float rule1Scale;
	float rule2Scale;
	float rule3Scale;
} ubo;

layout (set = 1,binding = 0) uniform UBO2 {
	float X;
	float Y;
} uMouse;

// book of shaders suggested pseudo random 
float random(uint index) {
	return fract(sin(index)*100000.0) - .5;
}

void main()
{
		// LOOK: This is very similar to a CUDA kernel.
		// Right now, the compute shader only advects the particles with their
		// velocity and handles wrap-around.
		// TODO: implement flocking behavior.

    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;

	// get previous position , this is a read only buffer
	vec2 lastPos = particlesA[index].pos.xy;

	// these are large values getting brought in 
	particlesB[index].pos.xy  = normalize(vec2(uMouse.X,uMouse.Y) - lastPos)*.1 + lastPos + vec2(random(index),random(index+7))*.05 ; 
}