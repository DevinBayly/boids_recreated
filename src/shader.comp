#version 450
struct Particle
{
	vec2 pos;
	vec2 vel;
};

// LOOK: These bindings correspond to the DescriptorSetLayouts and
// the DescriptorSets from prepareCompute()!

// Binding 0 : Particle storage buffer (read)
layout(set = 0, binding = 1) buffer ParticlesA
{
   Particle particlesA[ ];
};
int NUM_PARTICLES = 15000;
// Binding 1 : Particle storage buffer (write)
layout(set = 0, binding = 2) buffer ParticlesB
{
   Particle particlesB[ ];
};
// this value is set in the outside also, so that the actual number of work groups * our local size is equal to number particles

layout (local_size_x = 64, local_size_y = 1) in; // LOOK: rule weights and distances, as well as particle count, based off uniforms.// The deltaT here has to be updated every frame to account for changes in

// frame rate.
layout (set = 0 ,binding = 0) uniform UBO
{
	float deltaT;
	float rule1Distance;
	float rule2Distance;
	float rule3Distance;
	float rule1Scale;
	float rule2Scale;
	float rule3Scale;
} ubo;

layout (set = 1,binding = 0) uniform UBO2 {
	float x;
	float y;
} uMouse;

// book of shaders suggested pseudo random 
float random(float i) {
	return fract(sin(i)*100000.0) - .5;
}
float maxVelo = .8;
float radius = 2.0;
void main()
{
		// LOOK: This is very similar to a CUDA kernel.
		// Right now, the compute shader only advects the particles with their
		// velocity and handles wrap-around.
		// TODO: implement flocking behavior.

    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;

	// get previous position , this is a read only buffer
	vec2 lastPos = particlesA[index].pos.xy;
	vec2 lastVel = particlesA[index].vel.xy;

	// these are large values getting brought in 

	// use the normalized direction to change velocity and have the accumulated velocity update the position
	//vec2 mouse_vec = vec2(uMouse.x,uMouse.y);
	vec2 mouse_vec = vec2(.5);
	// this is the radius
	vec2 newVel = lastVel;
		// calculate the direction from last to the mouse + some jitter
		vec2 direction_towards_mouse = normalize(vec2(mouse_vec.x + random(lastPos.x)*.05,mouse_vec.y+ random(lastPos.y)*.05) - lastPos);
		vec2 direction_away = - direction_towards_mouse;
		vec2 accel = direction_towards_mouse;
		newVel+= accel*.01;
	//newVel*=.99;

	if (length(newVel) > maxVelo) {
		newVel = normalize(newVel)*maxVelo;
	} 
	vec2 newPos = lastPos + newVel;
	// have limits on the borders
	// when we hit these flip the velocity direction to simulate bounce
	if (newPos.x < -1 || newPos.x > 1) {
		newVel.x *= -1;
	} 
	if (newPos.y < -1 || newPos.y > 1) {
		newVel.y *= -1;
	} 
	//particlesB[index].vel.xy = newVel;
	//particlesB[index].vel.xy = vec2(0.);
	particlesB[index].vel.xy = newVel;
	
	particlesB[index].pos.xy  = newPos; 
	//particlesB[index].pos.xy  = vec2(0.); 
}
